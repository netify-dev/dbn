name: Build DBN Release Binaries

on:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: linux
          - os: macos-13
            label: macos-intel
          - os: macos-14
            label: macos-arm64
          - os: windows-latest
            label: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.0'

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}
          restore-keys: |
            ${{ runner.os }}-r-

      - name: Install OpenMP (macOS only)
        if: startsWith(matrix.os, 'macos')
        run: brew install libomp

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2

      - name: Extract version from DESCRIPTION
        id: version
        run: |
          version <- read.dcf("DESCRIPTION")[1, "Version"]
          cat(sprintf("version=%s\n", version), file = Sys.getenv("GITHUB_OUTPUT"), append = TRUE)
        shell: Rscript {0}

      - name: Configure OpenMP for macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          # Get libomp paths
          LIBOMP_PREFIX=$(brew --prefix libomp)
          
          # Create a temporary Makevars that properly links OpenMP
          echo "# macOS OpenMP configuration" > src/Makevars.tmp
          echo "PKG_CXXFLAGS = \$(SHLIB_OPENMP_CXXFLAGS) -Xpreprocessor -fopenmp" >> src/Makevars.tmp
          echo "PKG_CPPFLAGS = -I${LIBOMP_PREFIX}/include" >> src/Makevars.tmp
          echo "PKG_LIBS = -L${LIBOMP_PREFIX}/lib -lomp \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)" >> src/Makevars.tmp
          
          # Backup original and use our version
          if [ -f src/Makevars ]; then
            mv src/Makevars src/Makevars.orig
          fi
          mv src/Makevars.tmp src/Makevars
          
          echo "Contents of src/Makevars:"
          cat src/Makevars

      - name: Build source package
        run: R CMD build .
        shell: bash

      - name: Build binary package
        run: |
          pkg_file=$(ls -1tr *.tar.gz | tail -n 1)
          R CMD INSTALL --build "$pkg_file"
          
          platform=${{ matrix.label }}
          for f in *.tgz *.zip *.tar.gz *.tar.bz2; do
            if [ -f "$f" ]; then
              ext="${f##*.}"
              filename=$(basename "$f")
              mv "$f" "${filename%.*}-${platform}.${ext}"
            fi
          done
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dbn-${{ matrix.label }}-v${{ steps.version.outputs.version }}
          path: |
            *.tgz
            *.zip
            *.tar.gz
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.0'

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to root of artifacts directory
        run: |
          find artifacts -type f \( -name "*.zip" -o -name "*.tgz" -o -name "*.tar.gz" \) -exec mv {} artifacts/ \;
        shell: bash

      - name: Extract version from DESCRIPTION
        id: version
        run: |
          version <- read.dcf("DESCRIPTION")[1, "Version"]
          cat(sprintf("version=%s\n", version), file = Sys.getenv("GITHUB_OUTPUT"), append = TRUE)
        shell: Rscript {0}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "dbn v${{ steps.version.outputs.version }}"
          tag_name: "v${{ steps.version.outputs.version }}"
          generate_release_notes: true
          files: |
            artifacts/*.tgz
            artifacts/*.zip
            artifacts/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}