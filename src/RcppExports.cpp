// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stabilize_spectral_radius
arma::mat stabilize_spectral_radius(const arma::mat& M, double threshold);
RcppExport SEXP _dbn_stabilize_spectral_radius(SEXP MSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(stabilize_spectral_radius(M, threshold));
    return rcpp_result_gen;
END_RCPP
}
// safe_cholesky
bool safe_cholesky(arma::mat& L, const arma::mat& A, double reg);
RcppExport SEXP _dbn_safe_cholesky(SEXP LSEXP, SEXP ASEXP, SEXP regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    rcpp_result_gen = Rcpp::wrap(safe_cholesky(L, A, reg));
    return rcpp_result_gen;
END_RCPP
}
// ensure_positive_definite
arma::mat ensure_positive_definite(const arma::mat& M, double min_eigenvalue);
RcppExport SEXP _dbn_ensure_positive_definite(SEXP MSEXP, SEXP min_eigenvalueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type min_eigenvalue(min_eigenvalueSEXP);
    rcpp_result_gen = Rcpp::wrap(ensure_positive_definite(M, min_eigenvalue));
    return rcpp_result_gen;
END_RCPP
}
// is_stationary
bool is_stationary(const arma::mat& A, const arma::mat& B, int p, int q);
RcppExport SEXP _dbn_is_stationary(SEXP ASEXP, SEXP BSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(is_stationary(A, B, p, q));
    return rcpp_result_gen;
END_RCPP
}
// batch_update_Z_ordinal
arma::mat batch_update_Z_ordinal(const arma::mat& R_4d, const arma::mat& Z_4d, const arma::mat& Theta_4d, const arma::cube& M, const List& IR, int m, int p, int Tt);
RcppExport SEXP _dbn_batch_update_Z_ordinal(SEXP R_4dSEXP, SEXP Z_4dSEXP, SEXP Theta_4dSEXP, SEXP MSEXP, SEXP IRSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R_4d(R_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR(IRSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_update_Z_ordinal(R_4d, Z_4d, Theta_4d, M, IR, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// batch_update_Z_ordinal_fast
arma::mat batch_update_Z_ordinal_fast(const arma::mat& R_4d, const arma::mat& Z_4d, const arma::mat& Theta_4d, const arma::cube& M, const List& IR, const List& IR_time_indices, int m, int p, int Tt);
RcppExport SEXP _dbn_batch_update_Z_ordinal_fast(SEXP R_4dSEXP, SEXP Z_4dSEXP, SEXP Theta_4dSEXP, SEXP MSEXP, SEXP IRSEXP, SEXP IR_time_indicesSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R_4d(R_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR(IRSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR_time_indices(IR_time_indicesSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_update_Z_ordinal_fast(R_4d, Z_4d, Theta_4d, M, IR, IR_time_indices, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// precompute_time_indices
List precompute_time_indices(const List& IR, int m, int p, int Tt);
RcppExport SEXP _dbn_precompute_time_indices(SEXP IRSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type IR(IRSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(precompute_time_indices(IR, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_dynamic
List update_mu_dynamic(const arma::mat& Z_4d, const arma::mat& Theta_4d, double g2, double a_g, double b_g, int m, int p, int Tt);
RcppExport SEXP _dbn_update_mu_dynamic(SEXP Z_4dSEXP, SEXP Theta_4dSEXP, SEXP g2SEXP, SEXP a_gSEXP, SEXP b_gSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type a_g(a_gSEXP);
    Rcpp::traits::input_parameter< double >::type b_g(b_gSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_dynamic(Z_4d, Theta_4d, g2, a_g, b_g, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// batch_ffbs_all_relations
arma::cube batch_ffbs_all_relations(const arma::mat& Z_4d, const arma::cube& M, const arma::cube& Aarray, const arma::cube& Barray, double sigma2, int m, int p, int Tt);
RcppExport SEXP _dbn_batch_ffbs_all_relations(SEXP Z_4dSEXP, SEXP MSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_ffbs_all_relations(Z_4d, M, Aarray, Barray, sigma2, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_AB_batch_extended
List update_AB_batch_extended(const arma::mat& Theta_4d, const arma::cube& Aarray_old, const arma::cube& Barray_old, double sigma2, double tauA2, double tauB2, bool ar1, double rhoA, double rhoB, int m, int p, int Tt);
RcppExport SEXP _dbn_update_AB_batch_extended(SEXP Theta_4dSEXP, SEXP Aarray_oldSEXP, SEXP Barray_oldSEXP, SEXP sigma2SEXP, SEXP tauA2SEXP, SEXP tauB2SEXP, SEXP ar1SEXP, SEXP rhoASEXP, SEXP rhoBSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray_old(Aarray_oldSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray_old(Barray_oldSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tauA2(tauA2SEXP);
    Rcpp::traits::input_parameter< double >::type tauB2(tauB2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< double >::type rhoB(rhoBSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_AB_batch_extended(Theta_4d, Aarray_old, Barray_old, sigma2, tauA2, tauB2, ar1, rhoA, rhoB, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_variances_dynamic
List update_variances_dynamic(const arma::mat& Theta_4d, const arma::mat& Z_4d, const arma::cube& M, const arma::cube& Aarray, const arma::cube& Barray, double a_sig, double b_sig, int m, int p, int Tt, bool is_gaussian);
RcppExport SEXP _dbn_update_variances_dynamic(SEXP Theta_4dSEXP, SEXP Z_4dSEXP, SEXP MSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP a_sigSEXP, SEXP b_sigSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP, SEXP is_gaussianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type a_sig(a_sigSEXP);
    Rcpp::traits::input_parameter< double >::type b_sig(b_sigSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    Rcpp::traits::input_parameter< bool >::type is_gaussian(is_gaussianSEXP);
    rcpp_result_gen = Rcpp::wrap(update_variances_dynamic(Theta_4d, Z_4d, M, Aarray, Barray, a_sig, b_sig, m, p, Tt, is_gaussian));
    return rcpp_result_gen;
END_RCPP
}
// batch_ffbs_all_relations_blocked
arma::cube batch_ffbs_all_relations_blocked(const arma::mat& Z_4d, const arma::cube& M, const arma::cube& Aarray, const arma::cube& Barray, double sigma2, int m, int p, int Tt);
RcppExport SEXP _dbn_batch_ffbs_all_relations_blocked(SEXP Z_4dSEXP, SEXP MSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_ffbs_all_relations_blocked(Z_4d, M, Aarray, Barray, sigma2, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_AB_batch_large
List update_AB_batch_large(const arma::mat& Theta_4d, const arma::cube& Aarray_old, const arma::cube& Barray_old, double sigma2, double tauA2, double tauB2, bool ar1, double rhoA, double rhoB, int m, int p, int Tt);
RcppExport SEXP _dbn_update_AB_batch_large(SEXP Theta_4dSEXP, SEXP Aarray_oldSEXP, SEXP Barray_oldSEXP, SEXP sigma2SEXP, SEXP tauA2SEXP, SEXP tauB2SEXP, SEXP ar1SEXP, SEXP rhoASEXP, SEXP rhoBSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray_old(Aarray_oldSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray_old(Barray_oldSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tauA2(tauA2SEXP);
    Rcpp::traits::input_parameter< double >::type tauB2(tauB2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< double >::type rhoB(rhoBSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_AB_batch_large(Theta_4d, Aarray_old, Barray_old, sigma2, tauA2, tauB2, ar1, rhoA, rhoB, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_process_variance_blocked
double compute_process_variance_blocked(const arma::mat& Theta_4d, const arma::cube& Aarray, const arma::cube& Barray, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_process_variance_blocked(SEXP Theta_4dSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_4d(Theta_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_process_variance_blocked(Theta_4d, Aarray, Barray, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_bilinear
arma::cube ffbs_bilinear(const arma::cube& Z, const arma::mat& mu, const arma::cube& A_array, const arma::cube& B_array, double sigma2_proc, double sigma2_obs);
RcppExport SEXP _dbn_ffbs_bilinear(SEXP ZSEXP, SEXP muSEXP, SEXP A_arraySEXP, SEXP B_arraySEXP, SEXP sigma2_procSEXP, SEXP sigma2_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type A_array(A_arraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B_array(B_arraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_obs(sigma2_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_bilinear(Z, mu, A_array, B_array, sigma2_proc, sigma2_obs));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_dlm_cpp
arma::mat ffbs_dlm_cpp(const Rcpp::List& y, const Rcpp::List& Flist, const arma::mat& V, const arma::mat& W, const arma::vec& m0, const arma::mat& C0, bool ar1, double rho);
RcppExport SEXP _dbn_ffbs_dlm_cpp(SEXP ySEXP, SEXP FlistSEXP, SEXP VSEXP, SEXP WSEXP, SEXP m0SEXP, SEXP C0SEXP, SEXP ar1SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Flist(FlistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_dlm_cpp(y, Flist, V, W, m0, C0, ar1, rho));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_dlm_batch_cpp
arma::cube ffbs_dlm_batch_cpp(const arma::mat& Y_batch, const arma::cube& F_batch, const arma::vec& V_batch, const arma::mat& W, const arma::vec& m0, const arma::mat& C0, bool ar1, double rho);
RcppExport SEXP _dbn_ffbs_dlm_batch_cpp(SEXP Y_batchSEXP, SEXP F_batchSEXP, SEXP V_batchSEXP, SEXP WSEXP, SEXP m0SEXP, SEXP C0SEXP, SEXP ar1SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_batch(Y_batchSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type F_batch(F_batchSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type V_batch(V_batchSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_dlm_batch_cpp(Y_batch, F_batch, V_batch, W, m0, C0, ar1, rho));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_theta_struct_5arg_cpp
arma::cube ffbs_theta_struct_5arg_cpp(const arma::cube& Z, const arma::mat& mu, const arma::cube& A_array, const arma::cube& B_array, double sigma2);
RcppExport SEXP _dbn_ffbs_theta_struct_5arg_cpp(SEXP ZSEXP, SEXP muSEXP, SEXP A_arraySEXP, SEXP B_arraySEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type A_array(A_arraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B_array(B_arraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_theta_struct_5arg_cpp(Z, mu, A_array, B_array, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_theta_struct_cpp
arma::cube ffbs_theta_struct_cpp(const arma::cube& Z, const arma::mat& mu, const arma::cube& A_array, const arma::cube& B_array, double sigma2_proc, double sigma2_obs);
RcppExport SEXP _dbn_ffbs_theta_struct_cpp(SEXP ZSEXP, SEXP muSEXP, SEXP A_arraySEXP, SEXP B_arraySEXP, SEXP sigma2_procSEXP, SEXP sigma2_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type A_array(A_arraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B_array(B_arraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_obs(sigma2_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_theta_struct_cpp(Z, mu, A_array, B_array, sigma2_proc, sigma2_obs));
    return rcpp_result_gen;
END_RCPP
}
// compute_gaussian_obs_residuals_cpp
double compute_gaussian_obs_residuals_cpp(const arma::cube& Z, const arma::cube& Theta, const arma::cube& M);
RcppExport SEXP _dbn_compute_gaussian_obs_residuals_cpp(SEXP ZSEXP, SEXP ThetaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gaussian_obs_residuals_cpp(Z, Theta, M));
    return rcpp_result_gen;
END_RCPP
}
// compute_gaussian_obs_residuals_4d_cpp
double compute_gaussian_obs_residuals_4d_cpp(const arma::cube& Z_flat, const arma::cube& Theta_flat, const arma::cube& M_flat, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_gaussian_obs_residuals_4d_cpp(SEXP Z_flatSEXP, SEXP Theta_flatSEXP, SEXP M_flatSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_flat(Z_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_flat(M_flatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gaussian_obs_residuals_4d_cpp(Z_flat, Theta_flat, M_flat, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_gaussian_obs_residuals_batch_cpp
double compute_gaussian_obs_residuals_batch_cpp(const arma::cube& Z, const arma::cube& Theta, const arma::mat& M, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_gaussian_obs_residuals_batch_cpp(SEXP ZSEXP, SEXP ThetaSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gaussian_obs_residuals_batch_cpp(Z, Theta, M, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// forward_hmm
arma::mat forward_hmm(const arma::cube& Theta_avg, const List& A_list, const List& B_list, const arma::mat& Pi, double sigma2, const arma::vec& pi0);
RcppExport SEXP _dbn_forward_hmm(SEXP Theta_avgSEXP, SEXP A_listSEXP, SEXP B_listSEXP, SEXP PiSEXP, SEXP sigma2SEXP, SEXP pi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_avg(Theta_avgSEXP);
    Rcpp::traits::input_parameter< const List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type B_list(B_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi0(pi0SEXP);
    rcpp_result_gen = Rcpp::wrap(forward_hmm(Theta_avg, A_list, B_list, Pi, sigma2, pi0));
    return rcpp_result_gen;
END_RCPP
}
// forward_hmm_fast
arma::mat forward_hmm_fast(const arma::cube& Theta_avg, const List& A_list, const List& B_list, const arma::mat& Pi, double sigma2, const arma::vec& pi0, int beam_width);
RcppExport SEXP _dbn_forward_hmm_fast(SEXP Theta_avgSEXP, SEXP A_listSEXP, SEXP B_listSEXP, SEXP PiSEXP, SEXP sigma2SEXP, SEXP pi0SEXP, SEXP beam_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_avg(Theta_avgSEXP);
    Rcpp::traits::input_parameter< const List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type B_list(B_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< int >::type beam_width(beam_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_hmm_fast(Theta_avg, A_list, B_list, Pi, sigma2, pi0, beam_width));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample
IntegerVector backward_sample(const arma::mat& log_alpha, const arma::mat& Pi);
RcppExport SEXP _dbn_backward_sample(SEXP log_alphaSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample(log_alpha, Pi));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample_fast
IntegerVector backward_sample_fast(const arma::mat& log_alpha, const arma::mat& Pi);
RcppExport SEXP _dbn_backward_sample_fast(SEXP log_alphaSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_alpha(log_alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample_fast(log_alpha, Pi));
    return rcpp_result_gen;
END_RCPP
}
// build_regime_arrays
List build_regime_arrays(const IntegerVector& S, const List& A_list, const List& B_list, int m, int Tt);
RcppExport SEXP _dbn_build_regime_arrays(SEXP SSEXP, SEXP A_listSEXP, SEXP B_listSEXP, SEXP mSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type B_list(B_listSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(build_regime_arrays(S, A_list, B_list, m, Tt));
    return rcpp_result_gen;
END_RCPP
}
// collect_regime_thetas
List collect_regime_thetas(const arma::cube& Theta_avg, const IntegerVector& S, int regime, int m);
RcppExport SEXP _dbn_collect_regime_thetas(SEXP Theta_avgSEXP, SEXP SSEXP, SEXP regimeSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_avg(Theta_avgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type regime(regimeSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(collect_regime_thetas(Theta_avg, S, regime, m));
    return rcpp_result_gen;
END_RCPP
}
// count_transitions
arma::mat count_transitions(const IntegerVector& S, int R);
RcppExport SEXP _dbn_count_transitions(SEXP SSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(count_transitions(S, R));
    return rcpp_result_gen;
END_RCPP
}
// compute_regime_residuals
double compute_regime_residuals(const List& A_list, const arma::mat& I_m, int R, int m);
RcppExport SEXP _dbn_compute_regime_residuals(SEXP A_listSEXP, SEXP I_mSEXP, SEXP RSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type I_m(I_mSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_regime_residuals(A_list, I_m, R, m));
    return rcpp_result_gen;
END_RCPP
}
// init_states_spectral
IntegerVector init_states_spectral(const arma::cube& Y, int R, int m, int p, int Tt);
RcppExport SEXP _dbn_init_states_spectral(SEXP YSEXP, SEXP RSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(init_states_spectral(Y, R, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// rinvwishart_stable
arma::mat rinvwishart_stable(int nu, const arma::mat& S);
RcppExport SEXP _dbn_rinvwishart_stable(SEXP nuSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwishart_stable(nu, S));
    return rcpp_result_gen;
END_RCPP
}
// is_valid_innovation_cov
bool is_valid_innovation_cov(const arma::mat& Sigma_e, double min_eigenvalue, double max_condition);
RcppExport SEXP _dbn_is_valid_innovation_cov(SEXP Sigma_eSEXP, SEXP min_eigenvalueSEXP, SEXP max_conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_e(Sigma_eSEXP);
    Rcpp::traits::input_parameter< double >::type min_eigenvalue(min_eigenvalueSEXP);
    Rcpp::traits::input_parameter< double >::type max_condition(max_conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_innovation_cov(Sigma_e, min_eigenvalue, max_condition));
    return rcpp_result_gen;
END_RCPP
}
// update_innovation_cov_adaptive
Rcpp::List update_innovation_cov_adaptive(const arma::mat& Sigma_e_current, int nu, const arma::mat& S, const arma::cube& X, const arma::mat& A, const arma::mat& B, double adapt_scale);
RcppExport SEXP _dbn_update_innovation_cov_adaptive(SEXP Sigma_e_currentSEXP, SEXP nuSEXP, SEXP SSEXP, SEXP XSEXP, SEXP ASEXP, SEXP BSEXP, SEXP adapt_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_e_current(Sigma_e_currentSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type adapt_scale(adapt_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(update_innovation_cov_adaptive(Sigma_e_current, nu, S, X, A, B, adapt_scale));
    return rcpp_result_gen;
END_RCPP
}
// impulse_response_const
arma::cube impulse_response_const(const arma::mat& A, const arma::mat& B, const arma::mat& S, int H);
RcppExport SEXP _dbn_impulse_response_const(SEXP ASEXP, SEXP BSEXP, SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(impulse_response_const(A, B, S, H));
    return rcpp_result_gen;
END_RCPP
}
// impulse_response_dynamic
arma::cube impulse_response_dynamic(const arma::cube& Aarray, const arma::cube& Barray, const arma::mat& S, int t0, int H);
RcppExport SEXP _dbn_impulse_response_dynamic(SEXP AarraySEXP, SEXP BarraySEXP, SEXP SSEXP, SEXP t0SEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(impulse_response_dynamic(Aarray, Barray, S, t0, H));
    return rcpp_result_gen;
END_RCPP
}
// compute_A_lowrank
arma::mat compute_A_lowrank(const arma::mat& U, const arma::vec& alpha_t);
RcppExport SEXP _dbn_compute_A_lowrank(SEXP USEXP, SEXP alpha_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_t(alpha_tSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_A_lowrank(U, alpha_t));
    return rcpp_result_gen;
END_RCPP
}
// compute_all_A_lowrank
arma::cube compute_all_A_lowrank(const arma::mat& U, const arma::mat& alpha, int Tt);
RcppExport SEXP _dbn_compute_all_A_lowrank(SEXP USEXP, SEXP alphaSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all_A_lowrank(U, alpha, Tt));
    return rcpp_result_gen;
END_RCPP
}
// build_F_alpha_vectorized
arma::mat build_F_alpha_vectorized(const arma::mat& U, const arma::mat& Theta_prev, const arma::mat& B_t, int p, int Tt);
RcppExport SEXP _dbn_build_F_alpha_vectorized(SEXP USEXP, SEXP Theta_prevSEXP, SEXP B_tSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_prev(Theta_prevSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_t(B_tSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(build_F_alpha_vectorized(U, Theta_prev, B_t, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// build_y_alpha_vectorized
arma::vec build_y_alpha_vectorized(const arma::cube& Theta_flat, const arma::cube& M, int m, int p, int Tt);
RcppExport SEXP _dbn_build_y_alpha_vectorized(SEXP Theta_flatSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(build_y_alpha_vectorized(Theta_flat, M, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// loglik_U
double loglik_U(const arma::mat& U, const arma::mat& alpha, const arma::cube& Theta_avg, const arma::cube& Barray, double sigma2);
RcppExport SEXP _dbn_loglik_U(SEXP USEXP, SEXP alphaSEXP, SEXP Theta_avgSEXP, SEXP BarraySEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_avg(Theta_avgSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_U(U, alpha, Theta_avg, Barray, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// cayley_transform
arma::mat cayley_transform(const arma::mat& U, const arma::mat& W, double epsilon);
RcppExport SEXP _dbn_cayley_transform(SEXP USEXP, SEXP WSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cayley_transform(U, W, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// generate_skew_proposal
arma::mat generate_skew_proposal(int m, double norm_cap);
RcppExport SEXP _dbn_generate_skew_proposal(SEXP mSEXP, SEXP norm_capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type norm_cap(norm_capSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_skew_proposal(m, norm_cap));
    return rcpp_result_gen;
END_RCPP
}
// update_B_lowrank_batch
arma::cube update_B_lowrank_batch(const arma::cube& Theta_flat, const arma::mat& U, const arma::mat& alpha, double sigma2_proc, double tau_B2, bool ar1, double rho, int m, int p, int Tt);
RcppExport SEXP _dbn_update_B_lowrank_batch(SEXP Theta_flatSEXP, SEXP USEXP, SEXP alphaSEXP, SEXP sigma2_procSEXP, SEXP tau_B2SEXP, SEXP ar1SEXP, SEXP rhoSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type tau_B2(tau_B2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_lowrank_batch(Theta_flat, U, alpha, sigma2_proc, tau_B2, ar1, rho, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_lowrank_residuals
double compute_lowrank_residuals(const arma::cube& Theta_flat, const arma::cube& M, const arma::mat& U, const arma::mat& alpha, const arma::cube& Barray, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_lowrank_residuals(SEXP Theta_flatSEXP, SEXP MSEXP, SEXP USEXP, SEXP alphaSEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_lowrank_residuals(Theta_flat, M, U, alpha, Barray, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_sigma2_lowrank_batch
double compute_sigma2_lowrank_batch(const arma::cube& Theta, const arma::cube& Aarray, const arma::cube& Barray, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_sigma2_lowrank_batch(SEXP ThetaSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sigma2_lowrank_batch(Theta, Aarray, Barray, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_sigma2_simd
double compute_sigma2_simd(const arma::cube& Theta, const arma::mat& U, const arma::mat& alpha, const arma::cube& Barray, int m, int p, int Tt, int r);
RcppExport SEXP _dbn_compute_sigma2_simd(SEXP ThetaSEXP, SEXP USEXP, SEXP alphaSEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sigma2_simd(Theta, U, alpha, Barray, m, p, Tt, r));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_theta_all_relations
arma::cube ffbs_theta_all_relations(const arma::cube& Z_all, const arma::cube& M_all, const arma::cube& Aarray, const arma::cube& Barray, double sigma2_proc, double sigma2_obs, int m, int p, int Tt);
RcppExport SEXP _dbn_ffbs_theta_all_relations(SEXP Z_allSEXP, SEXP M_allSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2_procSEXP, SEXP sigma2_obsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_all(Z_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_all(M_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_obs(sigma2_obsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_theta_all_relations(Z_all, M_all, Aarray, Barray, sigma2_proc, sigma2_obs, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// ffbs_theta_blocked
arma::cube ffbs_theta_blocked(const arma::cube& Z_all, const arma::cube& M_all, const arma::cube& Aarray, const arma::cube& Barray, double sigma2_proc, double sigma2_obs, int m, int p, int Tt);
RcppExport SEXP _dbn_ffbs_theta_blocked(SEXP Z_allSEXP, SEXP M_allSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2_procSEXP, SEXP sigma2_obsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_all(Z_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_all(M_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_obs(sigma2_obsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(ffbs_theta_blocked(Z_all, M_all, Aarray, Barray, sigma2_proc, sigma2_obs, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha_optimized
arma::mat update_alpha_optimized(const arma::cube& Theta, const arma::mat& U, const arma::cube& Barray, double sigma2_proc, double tau_alpha2, bool ar1_alpha, double rho_alpha, int m, int p, int Tt, int r);
RcppExport SEXP _dbn_update_alpha_optimized(SEXP ThetaSEXP, SEXP USEXP, SEXP BarraySEXP, SEXP sigma2_procSEXP, SEXP tau_alpha2SEXP, SEXP ar1_alphaSEXP, SEXP rho_alphaSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type tau_alpha2(tau_alpha2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1_alpha(ar1_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_alpha(rho_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_optimized(Theta, U, Barray, sigma2_proc, tau_alpha2, ar1_alpha, rho_alpha, m, p, Tt, r));
    return rcpp_result_gen;
END_RCPP
}
// update_B_blocked
arma::cube update_B_blocked(const arma::cube& Theta, const arma::cube& Aarray, double sigma2_proc, double tau_B2, bool ar1_B, double rho_B, int m, int p, int Tt);
RcppExport SEXP _dbn_update_B_blocked(SEXP ThetaSEXP, SEXP AarraySEXP, SEXP sigma2_procSEXP, SEXP tau_B2SEXP, SEXP ar1_BSEXP, SEXP rho_BSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type tau_B2(tau_B2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1_B(ar1_BSEXP);
    Rcpp::traits::input_parameter< double >::type rho_B(rho_BSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_blocked(Theta, Aarray, sigma2_proc, tau_B2, ar1_B, rho_B, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_ordinal_global
void update_Z_ordinal_global(arma::cube& Z_all, const arma::cube& Theta_all, const arma::cube& M_all, const List& IR_list, int m, int p, int Tt);
RcppExport SEXP _dbn_update_Z_ordinal_global(SEXP Z_allSEXP, SEXP Theta_allSEXP, SEXP M_allSEXP, SEXP IR_listSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Z_all(Z_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all(Theta_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_all(M_allSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR_list(IR_listSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    update_Z_ordinal_global(Z_all, Theta_all, M_all, IR_list, m, p, Tt);
    return R_NilValue;
END_RCPP
}
// update_B_parallel
arma::cube update_B_parallel(const arma::cube& Theta, const arma::cube& Aarray, double sigma2_proc, double tau_B2, bool ar1_B, double rho_B, int m, int p, int Tt);
RcppExport SEXP _dbn_update_B_parallel(SEXP ThetaSEXP, SEXP AarraySEXP, SEXP sigma2_procSEXP, SEXP tau_B2SEXP, SEXP ar1_BSEXP, SEXP rho_BSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type tau_B2(tau_B2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1_B(ar1_BSEXP);
    Rcpp::traits::input_parameter< double >::type rho_B(rho_BSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_parallel(Theta, Aarray, sigma2_proc, tau_B2, ar1_B, rho_B, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha_batch
arma::mat update_alpha_batch(const arma::cube& Theta, const arma::mat& U, const arma::cube& Barray, double sigma2_proc, double tau_alpha2, bool ar1_alpha, double rho_alpha, int m, int p, int Tt, int r);
RcppExport SEXP _dbn_update_alpha_batch(SEXP ThetaSEXP, SEXP USEXP, SEXP BarraySEXP, SEXP sigma2_procSEXP, SEXP tau_alpha2SEXP, SEXP ar1_alphaSEXP, SEXP rho_alphaSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_proc(sigma2_procSEXP);
    Rcpp::traits::input_parameter< double >::type tau_alpha2(tau_alpha2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1_alpha(ar1_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_alpha(rho_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_batch(Theta, U, Barray, sigma2_proc, tau_alpha2, ar1_alpha, rho_alpha, m, p, Tt, r));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_ordinal_vectorized
void update_Z_ordinal_vectorized(arma::cube& Z_all, const arma::cube& Theta_all, const arma::cube& M_all, const List& IR_list, int m, int p, int Tt);
RcppExport SEXP _dbn_update_Z_ordinal_vectorized(SEXP Z_allSEXP, SEXP Theta_allSEXP, SEXP M_allSEXP, SEXP IR_listSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Z_all(Z_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all(Theta_allSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M_all(M_allSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR_list(IR_listSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    update_Z_ordinal_vectorized(Z_all, Theta_all, M_all, IR_list, m, p, Tt);
    return R_NilValue;
END_RCPP
}
// rz_gaussian_approx_cpp
arma::cube rz_gaussian_approx_cpp(const arma::cube& R, const arma::cube& Z, const arma::cube& EZ, double sigma);
RcppExport SEXP _dbn_rz_gaussian_approx_cpp(SEXP RSEXP, SEXP ZSEXP, SEXP EZSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rz_gaussian_approx_cpp(R, Z, EZ, sigma));
    return rcpp_result_gen;
END_RCPP
}
// validate_transition_proposal
bool validate_transition_proposal(const arma::mat& A_prop, const arma::mat& B_prop, int p, int q, bool check_stationary);
RcppExport SEXP _dbn_validate_transition_proposal(SEXP A_propSEXP, SEXP B_propSEXP, SEXP pSEXP, SEXP qSEXP, SEXP check_stationarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A_prop(A_propSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_prop(B_propSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type check_stationary(check_stationarySEXP);
    rcpp_result_gen = Rcpp::wrap(validate_transition_proposal(A_prop, B_prop, p, q, check_stationary));
    return rcpp_result_gen;
END_RCPP
}
// propose_transition_adaptive
Rcpp::List propose_transition_adaptive(const arma::mat& A_current, const arma::mat& B_current, double step_size_A, double step_size_B, int max_attempts);
RcppExport SEXP _dbn_propose_transition_adaptive(SEXP A_currentSEXP, SEXP B_currentSEXP, SEXP step_size_ASEXP, SEXP step_size_BSEXP, SEXP max_attemptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A_current(A_currentSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_current(B_currentSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_A(step_size_ASEXP);
    Rcpp::traits::input_parameter< double >::type step_size_B(step_size_BSEXP);
    Rcpp::traits::input_parameter< int >::type max_attempts(max_attemptsSEXP);
    rcpp_result_gen = Rcpp::wrap(propose_transition_adaptive(A_current, B_current, step_size_A, step_size_B, max_attempts));
    return rcpp_result_gen;
END_RCPP
}
// check_edge_cases
Rcpp::List check_edge_cases(const arma::cube& Y);
RcppExport SEXP _dbn_check_edge_cases(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(check_edge_cases(Y));
    return rcpp_result_gen;
END_RCPP
}
// rz_fc_cpp
arma::vec rz_fc_cpp(const arma::vec& R, const arma::vec& Z, const arma::vec& EZ, const Rcpp::List& iranks);
RcppExport SEXP _dbn_rz_fc_cpp(SEXP RSEXP, SEXP ZSEXP, SEXP EZSEXP, SEXP iranksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type iranks(iranksSEXP);
    rcpp_result_gen = Rcpp::wrap(rz_fc_cpp(R, Z, EZ, iranks));
    return rcpp_result_gen;
END_RCPP
}
// build_rank_indices
Rcpp::List build_rank_indices(const arma::mat& R);
RcppExport SEXP _dbn_build_rank_indices(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(build_rank_indices(R));
    return rcpp_result_gen;
END_RCPP
}
// rz_fc_matrix
arma::mat rz_fc_matrix(const arma::mat& R, const arma::mat& Z_current, const arma::mat& EZ, const List& iranks);
RcppExport SEXP _dbn_rz_fc_matrix(SEXP RSEXP, SEXP Z_currentSEXP, SEXP EZSEXP, SEXP iranksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_current(Z_currentSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< const List& >::type iranks(iranksSEXP);
    rcpp_result_gen = Rcpp::wrap(rz_fc_matrix(R, Z_current, EZ, iranks));
    return rcpp_result_gen;
END_RCPP
}
// rz_fc_batch
arma::cube rz_fc_batch(const arma::cube& R, const arma::cube& Z_current, const arma::cube& EZ, const List& IR_list, int m, int p, int Tt);
RcppExport SEXP _dbn_rz_fc_batch(SEXP RSEXP, SEXP Z_currentSEXP, SEXP EZSEXP, SEXP IR_listSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_current(Z_currentSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type EZ(EZSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR_list(IR_listSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(rz_fc_batch(R, Z_current, EZ, IR_list, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// precompute_rank_structure
List precompute_rank_structure(const arma::cube& R, int m, int p, int Tt);
RcppExport SEXP _dbn_precompute_rank_structure(SEXP RSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(precompute_rank_structure(R, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// bilinear_product_fast
arma::mat bilinear_product_fast(const arma::mat& A, const arma::mat& Theta, const arma::mat& B);
RcppExport SEXP _dbn_bilinear_product_fast(SEXP ASEXP, SEXP ThetaSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinear_product_fast(A, Theta, B));
    return rcpp_result_gen;
END_RCPP
}
// compute_bilinear_residuals
double compute_bilinear_residuals(const arma::cube& Theta_flat, const arma::cube& Aarray, const arma::cube& Barray, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_bilinear_residuals(SEXP Theta_flatSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_bilinear_residuals(Theta_flat, Aarray, Barray, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_bilinear_residuals_fast
double compute_bilinear_residuals_fast(const arma::cube& Theta, const arma::cube& Aarray, const arma::cube& Barray, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_bilinear_residuals_fast(SEXP ThetaSEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_bilinear_residuals_fast(Theta, Aarray, Barray, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_observation_residuals
double compute_observation_residuals(const arma::cube& Z_flat, const arma::cube& Theta_flat, const arma::cube& M, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_observation_residuals(SEXP Z_flatSEXP, SEXP Theta_flatSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_flat(Z_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_observation_residuals(Z_flat, Theta_flat, M, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_zscores_batch
arma::cube compute_zscores_batch(const arma::cube& Y, const arma::vec& means, const arma::vec& sds, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_zscores_batch(SEXP YSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_zscores_batch(Y, means, sds, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_batch
arma::cube update_Z_batch(const arma::cube& R_flat, const arma::cube& Theta_flat, const arma::cube& M, const List& IR_list_flat, int m, int p, int Tt);
RcppExport SEXP _dbn_update_Z_batch(SEXP R_flatSEXP, SEXP Theta_flatSEXP, SEXP MSEXP, SEXP IR_list_flatSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R_flat(R_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_flat(Theta_flatSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR_list_flat(IR_list_flatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Z_batch(R_flat, Theta_flat, M, IR_list_flat, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// build_regime_arrays_vectorized
List build_regime_arrays_vectorized(const IntegerVector& S, const List& A_list, const List& B_list, int m, int Tt);
RcppExport SEXP _dbn_build_regime_arrays_vectorized(SEXP SSEXP, SEXP A_listSEXP, SEXP B_listSEXP, SEXP mSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type B_list(B_listSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(build_regime_arrays_vectorized(S, A_list, B_list, m, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_outer_products_batch
arma::cube compute_outer_products_batch(const arma::mat& U);
RcppExport SEXP _dbn_compute_outer_products_batch(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(compute_outer_products_batch(U));
    return rcpp_result_gen;
END_RCPP
}
// compute_A_lowrank_batch
arma::cube compute_A_lowrank_batch(const arma::cube& outer_prods, const arma::mat& alpha, int Tt);
RcppExport SEXP _dbn_compute_A_lowrank_batch(SEXP outer_prodsSEXP, SEXP alphaSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type outer_prods(outer_prodsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_A_lowrank_batch(outer_prods, alpha, Tt));
    return rcpp_result_gen;
END_RCPP
}
// reshape_Z_to_cube
arma::cube reshape_Z_to_cube(const NumericVector& Z_4d, int m, int p, int Tt);
RcppExport SEXP _dbn_reshape_Z_to_cube(SEXP Z_4dSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(reshape_Z_to_cube(Z_4d, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_diagonal_sse
double compute_diagonal_sse(const List& B_list, int K);
RcppExport SEXP _dbn_compute_diagonal_sse(SEXP B_listSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type B_list(B_listSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_diagonal_sse(B_list, K));
    return rcpp_result_gen;
END_RCPP
}
// compute_deviation_sum
double compute_deviation_sum(const arma::cube& ABarray, int m, int Tt);
RcppExport SEXP _dbn_compute_deviation_sum(SEXP ABarraySEXP, SEXP mSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type ABarray(ABarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_deviation_sum(ABarray, m, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_M_static
arma::cube compute_M_static(const arma::mat& Z_flat, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_M_static(SEXP Z_flatSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_flat(Z_flatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_M_static(Z_flat, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_rss_static
double compute_rss_static(const NumericVector& Z_4d, const arma::cube& M, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_rss_static(SEXP Z_4dSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rss_static(Z_4d, M, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// reshape_Z_to_cube_parallel
arma::cube reshape_Z_to_cube_parallel(const NumericVector& Z_4d, int m, int p, int Tt);
RcppExport SEXP _dbn_reshape_Z_to_cube_parallel(SEXP Z_4dSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Z_4d(Z_4dSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(reshape_Z_to_cube_parallel(Z_4d, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_M_static_blocked
arma::cube compute_M_static_blocked(const arma::mat& Z_flat, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_M_static_blocked(SEXP Z_flatSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z_flat(Z_flatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_M_static_blocked(Z_flat, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_rss_static_parallel
double compute_rss_static_parallel(const arma::cube& Z_cube, const arma::cube& M, int m, int p, int Tt);
RcppExport SEXP _dbn_compute_rss_static_parallel(SEXP Z_cubeSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_cube(Z_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rss_static_parallel(Z_cube, M, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_B_static_tiled
arma::mat update_B_static_tiled(const arma::cube& Z_cube, const arma::cube& M, double s2, double t2, int m, int p, int Tt);
RcppExport SEXP _dbn_update_B_static_tiled(SEXP Z_cubeSEXP, SEXP MSEXP, SEXP s2SEXP, SEXP t2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_cube(Z_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_static_tiled(Z_cube, M, s2, t2, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// update_A_batch
List update_A_batch(const arma::cube& Theta_all_1, const arma::cube& Theta_all_2, const arma::cube& Theta_all_3, const arma::cube& Theta_all_4, const arma::cube& Aarray, const arma::cube& Barray, double sigma2, double tauA2, bool ar1, double rhoA, int p);
RcppExport SEXP _dbn_update_A_batch(SEXP Theta_all_1SEXP, SEXP Theta_all_2SEXP, SEXP Theta_all_3SEXP, SEXP Theta_all_4SEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2SEXP, SEXP tauA2SEXP, SEXP ar1SEXP, SEXP rhoASEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_1(Theta_all_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_2(Theta_all_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_3(Theta_all_3SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_4(Theta_all_4SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tauA2(tauA2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_A_batch(Theta_all_1, Theta_all_2, Theta_all_3, Theta_all_4, Aarray, Barray, sigma2, tauA2, ar1, rhoA, p));
    return rcpp_result_gen;
END_RCPP
}
// update_B_batch
List update_B_batch(const arma::cube& Theta_all_1, const arma::cube& Theta_all_2, const arma::cube& Theta_all_3, const arma::cube& Theta_all_4, const arma::cube& Aarray, const arma::cube& Barray, double sigma2, double tauB2, bool ar1, double rhoB, int p);
RcppExport SEXP _dbn_update_B_batch(SEXP Theta_all_1SEXP, SEXP Theta_all_2SEXP, SEXP Theta_all_3SEXP, SEXP Theta_all_4SEXP, SEXP AarraySEXP, SEXP BarraySEXP, SEXP sigma2SEXP, SEXP tauB2SEXP, SEXP ar1SEXP, SEXP rhoBSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_1(Theta_all_1SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_2(Theta_all_2SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_3(Theta_all_3SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_all_4(Theta_all_4SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tauB2(tauB2SEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rhoB(rhoBSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_batch(Theta_all_1, Theta_all_2, Theta_all_3, Theta_all_4, Aarray, Barray, sigma2, tauB2, ar1, rhoB, p));
    return rcpp_result_gen;
END_RCPP
}
// update_AB_static_cpp
Rcpp::List update_AB_static_cpp(const arma::cube& Theta_prev, const arma::cube& Theta_curr, const arma::mat& B_init, double tau_A2, double tau_B2, double sigma2);
RcppExport SEXP _dbn_update_AB_static_cpp(SEXP Theta_prevSEXP, SEXP Theta_currSEXP, SEXP B_initSEXP, SEXP tau_A2SEXP, SEXP tau_B2SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_prev(Theta_prevSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_curr(Theta_currSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_init(B_initSEXP);
    Rcpp::traits::input_parameter< double >::type tau_A2(tau_A2SEXP);
    Rcpp::traits::input_parameter< double >::type tau_B2(tau_B2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_AB_static_cpp(Theta_prev, Theta_curr, B_init, tau_A2, tau_B2, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// build_F_alpha_cpp
arma::mat build_F_alpha_cpp(const arma::mat& U, const arma::cube& Theta_prev, const arma::cube& B_array, bool compute_all);
RcppExport SEXP _dbn_build_F_alpha_cpp(SEXP USEXP, SEXP Theta_prevSEXP, SEXP B_arraySEXP, SEXP compute_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta_prev(Theta_prevSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type B_array(B_arraySEXP);
    Rcpp::traits::input_parameter< bool >::type compute_all(compute_allSEXP);
    rcpp_result_gen = Rcpp::wrap(build_F_alpha_cpp(U, Theta_prev, B_array, compute_all));
    return rcpp_result_gen;
END_RCPP
}
// compute_XB_tensor
arma::cube compute_XB_tensor(const arma::cube& X, const List& B, int m, int p, int n);
RcppExport SEXP _dbn_compute_XB_tensor(SEXP XSEXP, SEXP BSEXP, SEXP mSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_XB_tensor(X, B, m, p, n));
    return rcpp_result_gen;
END_RCPP
}
// update_B_static
arma::mat update_B_static(const arma::cube& Z, const arma::cube& M, double s2, double t2, int m, int p, int n);
RcppExport SEXP _dbn_update_B_static(SEXP ZSEXP, SEXP MSEXP, SEXP s2SEXP, SEXP t2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_static(Z, M, s2, t2, m, p, n));
    return rcpp_result_gen;
END_RCPP
}
// broadcast_M_and_compute_EZ
arma::cube broadcast_M_and_compute_EZ(const arma::cube& M, double s2, int m, int p, int Tt);
RcppExport SEXP _dbn_broadcast_M_and_compute_EZ(SEXP MSEXP, SEXP s2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(broadcast_M_and_compute_EZ(M, s2, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_s2_update
double compute_s2_update(const List& Z_field, const arma::cube& M, int m, int p, int Tt, double a_prior, double b_prior);
RcppExport SEXP _dbn_compute_s2_update(SEXP Z_fieldSEXP, SEXP MSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP, SEXP a_priorSEXP, SEXP b_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Z_field(Z_fieldSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    Rcpp::traits::input_parameter< double >::type a_prior(a_priorSEXP);
    Rcpp::traits::input_parameter< double >::type b_prior(b_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_s2_update(Z_field, M, m, p, Tt, a_prior, b_prior));
    return rcpp_result_gen;
END_RCPP
}
// update_variances_batch
arma::vec update_variances_batch(const arma::vec& sum_squares, const arma::vec& counts, const arma::vec& a_priors, const arma::vec& b_priors);
RcppExport SEXP _dbn_update_variances_batch(SEXP sum_squaresSEXP, SEXP countsSEXP, SEXP a_priorsSEXP, SEXP b_priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sum_squares(sum_squaresSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a_priors(a_priorsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b_priors(b_priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_variances_batch(sum_squares, counts, a_priors, b_priors));
    return rcpp_result_gen;
END_RCPP
}
// stabilize_matrix
arma::mat stabilize_matrix(const arma::mat& M, double min_eig);
RcppExport SEXP _dbn_stabilize_matrix(SEXP MSEXP, SEXP min_eigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type min_eig(min_eigSEXP);
    rcpp_result_gen = Rcpp::wrap(stabilize_matrix(M, min_eig));
    return rcpp_result_gen;
END_RCPP
}
// update_Z_dynamic
arma::cube update_Z_dynamic(const arma::cube& R, const arma::cube& Z_current, const arma::cube& Theta, const arma::cube& M, const List& IR, int m, int p, int Tt);
RcppExport SEXP _dbn_update_Z_dynamic(SEXP RSEXP, SEXP Z_currentSEXP, SEXP ThetaSEXP, SEXP MSEXP, SEXP IRSEXP, SEXP mSEXP, SEXP pSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Z_current(Z_currentSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const List& >::type IR(IRSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Z_dynamic(R, Z_current, Theta, M, IR, m, p, Tt));
    return rcpp_result_gen;
END_RCPP
}
// precompute_products
List precompute_products(const arma::cube& Aarray, const arma::cube& Barray, int m, int Tt);
RcppExport SEXP _dbn_precompute_products(SEXP AarraySEXP, SEXP BarraySEXP, SEXP mSEXP, SEXP TtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type Tt(TtSEXP);
    rcpp_result_gen = Rcpp::wrap(precompute_products(Aarray, Barray, m, Tt));
    return rcpp_result_gen;
END_RCPP
}
// compute_residual_sum_squares
double compute_residual_sum_squares(const List& Z_field, const arma::cube& M, int p);
RcppExport SEXP _dbn_compute_residual_sum_squares(SEXP Z_fieldSEXP, SEXP MSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Z_field(Z_fieldSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_residual_sum_squares(Z_field, M, p));
    return rcpp_result_gen;
END_RCPP
}
// compute_innovation_variance
double compute_innovation_variance(const arma::cube& X_curr, const arma::cube& X_prev, bool ar1, double rho);
RcppExport SEXP _dbn_compute_innovation_variance(SEXP X_currSEXP, SEXP X_prevSEXP, SEXP ar1SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X_curr(X_currSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X_prev(X_prevSEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_innovation_variance(X_curr, X_prev, ar1, rho));
    return rcpp_result_gen;
END_RCPP
}
// compute_M_update
arma::cube compute_M_update(const List& Z_field, double g2, int m, int p);
RcppExport SEXP _dbn_compute_M_update(SEXP Z_fieldSEXP, SEXP g2SEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Z_field(Z_fieldSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_M_update(Z_field, g2, m, p));
    return rcpp_result_gen;
END_RCPP
}
// compute_AB_innovations
List compute_AB_innovations(const arma::cube& Aarray, const arma::cube& Barray, bool ar1, double rhoA, double rhoB);
RcppExport SEXP _dbn_compute_AB_innovations(SEXP AarraySEXP, SEXP BarraySEXP, SEXP ar1SEXP, SEXP rhoASEXP, SEXP rhoBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Aarray(AarraySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Barray(BarraySEXP);
    Rcpp::traits::input_parameter< bool >::type ar1(ar1SEXP);
    Rcpp::traits::input_parameter< double >::type rhoA(rhoASEXP);
    Rcpp::traits::input_parameter< double >::type rhoB(rhoBSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_AB_innovations(Aarray, Barray, ar1, rhoA, rhoB));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dbn_stabilize_spectral_radius", (DL_FUNC) &_dbn_stabilize_spectral_radius, 2},
    {"_dbn_safe_cholesky", (DL_FUNC) &_dbn_safe_cholesky, 3},
    {"_dbn_ensure_positive_definite", (DL_FUNC) &_dbn_ensure_positive_definite, 2},
    {"_dbn_is_stationary", (DL_FUNC) &_dbn_is_stationary, 4},
    {"_dbn_batch_update_Z_ordinal", (DL_FUNC) &_dbn_batch_update_Z_ordinal, 8},
    {"_dbn_batch_update_Z_ordinal_fast", (DL_FUNC) &_dbn_batch_update_Z_ordinal_fast, 9},
    {"_dbn_precompute_time_indices", (DL_FUNC) &_dbn_precompute_time_indices, 4},
    {"_dbn_update_mu_dynamic", (DL_FUNC) &_dbn_update_mu_dynamic, 8},
    {"_dbn_batch_ffbs_all_relations", (DL_FUNC) &_dbn_batch_ffbs_all_relations, 8},
    {"_dbn_update_AB_batch_extended", (DL_FUNC) &_dbn_update_AB_batch_extended, 12},
    {"_dbn_update_variances_dynamic", (DL_FUNC) &_dbn_update_variances_dynamic, 11},
    {"_dbn_batch_ffbs_all_relations_blocked", (DL_FUNC) &_dbn_batch_ffbs_all_relations_blocked, 8},
    {"_dbn_update_AB_batch_large", (DL_FUNC) &_dbn_update_AB_batch_large, 12},
    {"_dbn_compute_process_variance_blocked", (DL_FUNC) &_dbn_compute_process_variance_blocked, 6},
    {"_dbn_ffbs_bilinear", (DL_FUNC) &_dbn_ffbs_bilinear, 6},
    {"_dbn_ffbs_dlm_cpp", (DL_FUNC) &_dbn_ffbs_dlm_cpp, 8},
    {"_dbn_ffbs_dlm_batch_cpp", (DL_FUNC) &_dbn_ffbs_dlm_batch_cpp, 8},
    {"_dbn_ffbs_theta_struct_5arg_cpp", (DL_FUNC) &_dbn_ffbs_theta_struct_5arg_cpp, 5},
    {"_dbn_ffbs_theta_struct_cpp", (DL_FUNC) &_dbn_ffbs_theta_struct_cpp, 6},
    {"_dbn_compute_gaussian_obs_residuals_cpp", (DL_FUNC) &_dbn_compute_gaussian_obs_residuals_cpp, 3},
    {"_dbn_compute_gaussian_obs_residuals_4d_cpp", (DL_FUNC) &_dbn_compute_gaussian_obs_residuals_4d_cpp, 6},
    {"_dbn_compute_gaussian_obs_residuals_batch_cpp", (DL_FUNC) &_dbn_compute_gaussian_obs_residuals_batch_cpp, 6},
    {"_dbn_forward_hmm", (DL_FUNC) &_dbn_forward_hmm, 6},
    {"_dbn_forward_hmm_fast", (DL_FUNC) &_dbn_forward_hmm_fast, 7},
    {"_dbn_backward_sample", (DL_FUNC) &_dbn_backward_sample, 2},
    {"_dbn_backward_sample_fast", (DL_FUNC) &_dbn_backward_sample_fast, 2},
    {"_dbn_build_regime_arrays", (DL_FUNC) &_dbn_build_regime_arrays, 5},
    {"_dbn_collect_regime_thetas", (DL_FUNC) &_dbn_collect_regime_thetas, 4},
    {"_dbn_count_transitions", (DL_FUNC) &_dbn_count_transitions, 2},
    {"_dbn_compute_regime_residuals", (DL_FUNC) &_dbn_compute_regime_residuals, 4},
    {"_dbn_init_states_spectral", (DL_FUNC) &_dbn_init_states_spectral, 5},
    {"_dbn_rinvwishart_stable", (DL_FUNC) &_dbn_rinvwishart_stable, 2},
    {"_dbn_is_valid_innovation_cov", (DL_FUNC) &_dbn_is_valid_innovation_cov, 3},
    {"_dbn_update_innovation_cov_adaptive", (DL_FUNC) &_dbn_update_innovation_cov_adaptive, 7},
    {"_dbn_impulse_response_const", (DL_FUNC) &_dbn_impulse_response_const, 4},
    {"_dbn_impulse_response_dynamic", (DL_FUNC) &_dbn_impulse_response_dynamic, 5},
    {"_dbn_compute_A_lowrank", (DL_FUNC) &_dbn_compute_A_lowrank, 2},
    {"_dbn_compute_all_A_lowrank", (DL_FUNC) &_dbn_compute_all_A_lowrank, 3},
    {"_dbn_build_F_alpha_vectorized", (DL_FUNC) &_dbn_build_F_alpha_vectorized, 5},
    {"_dbn_build_y_alpha_vectorized", (DL_FUNC) &_dbn_build_y_alpha_vectorized, 5},
    {"_dbn_loglik_U", (DL_FUNC) &_dbn_loglik_U, 5},
    {"_dbn_cayley_transform", (DL_FUNC) &_dbn_cayley_transform, 3},
    {"_dbn_generate_skew_proposal", (DL_FUNC) &_dbn_generate_skew_proposal, 2},
    {"_dbn_update_B_lowrank_batch", (DL_FUNC) &_dbn_update_B_lowrank_batch, 10},
    {"_dbn_compute_lowrank_residuals", (DL_FUNC) &_dbn_compute_lowrank_residuals, 8},
    {"_dbn_compute_sigma2_lowrank_batch", (DL_FUNC) &_dbn_compute_sigma2_lowrank_batch, 6},
    {"_dbn_compute_sigma2_simd", (DL_FUNC) &_dbn_compute_sigma2_simd, 8},
    {"_dbn_ffbs_theta_all_relations", (DL_FUNC) &_dbn_ffbs_theta_all_relations, 9},
    {"_dbn_ffbs_theta_blocked", (DL_FUNC) &_dbn_ffbs_theta_blocked, 9},
    {"_dbn_update_alpha_optimized", (DL_FUNC) &_dbn_update_alpha_optimized, 11},
    {"_dbn_update_B_blocked", (DL_FUNC) &_dbn_update_B_blocked, 9},
    {"_dbn_update_Z_ordinal_global", (DL_FUNC) &_dbn_update_Z_ordinal_global, 7},
    {"_dbn_update_B_parallel", (DL_FUNC) &_dbn_update_B_parallel, 9},
    {"_dbn_update_alpha_batch", (DL_FUNC) &_dbn_update_alpha_batch, 11},
    {"_dbn_update_Z_ordinal_vectorized", (DL_FUNC) &_dbn_update_Z_ordinal_vectorized, 7},
    {"_dbn_rz_gaussian_approx_cpp", (DL_FUNC) &_dbn_rz_gaussian_approx_cpp, 4},
    {"_dbn_validate_transition_proposal", (DL_FUNC) &_dbn_validate_transition_proposal, 5},
    {"_dbn_propose_transition_adaptive", (DL_FUNC) &_dbn_propose_transition_adaptive, 5},
    {"_dbn_check_edge_cases", (DL_FUNC) &_dbn_check_edge_cases, 1},
    {"_dbn_rz_fc_cpp", (DL_FUNC) &_dbn_rz_fc_cpp, 4},
    {"_dbn_build_rank_indices", (DL_FUNC) &_dbn_build_rank_indices, 1},
    {"_dbn_rz_fc_matrix", (DL_FUNC) &_dbn_rz_fc_matrix, 4},
    {"_dbn_rz_fc_batch", (DL_FUNC) &_dbn_rz_fc_batch, 7},
    {"_dbn_precompute_rank_structure", (DL_FUNC) &_dbn_precompute_rank_structure, 4},
    {"_dbn_bilinear_product_fast", (DL_FUNC) &_dbn_bilinear_product_fast, 3},
    {"_dbn_compute_bilinear_residuals", (DL_FUNC) &_dbn_compute_bilinear_residuals, 6},
    {"_dbn_compute_bilinear_residuals_fast", (DL_FUNC) &_dbn_compute_bilinear_residuals_fast, 6},
    {"_dbn_compute_observation_residuals", (DL_FUNC) &_dbn_compute_observation_residuals, 6},
    {"_dbn_compute_zscores_batch", (DL_FUNC) &_dbn_compute_zscores_batch, 6},
    {"_dbn_update_Z_batch", (DL_FUNC) &_dbn_update_Z_batch, 7},
    {"_dbn_build_regime_arrays_vectorized", (DL_FUNC) &_dbn_build_regime_arrays_vectorized, 5},
    {"_dbn_compute_outer_products_batch", (DL_FUNC) &_dbn_compute_outer_products_batch, 1},
    {"_dbn_compute_A_lowrank_batch", (DL_FUNC) &_dbn_compute_A_lowrank_batch, 3},
    {"_dbn_reshape_Z_to_cube", (DL_FUNC) &_dbn_reshape_Z_to_cube, 4},
    {"_dbn_compute_diagonal_sse", (DL_FUNC) &_dbn_compute_diagonal_sse, 2},
    {"_dbn_compute_deviation_sum", (DL_FUNC) &_dbn_compute_deviation_sum, 3},
    {"_dbn_compute_M_static", (DL_FUNC) &_dbn_compute_M_static, 4},
    {"_dbn_compute_rss_static", (DL_FUNC) &_dbn_compute_rss_static, 5},
    {"_dbn_reshape_Z_to_cube_parallel", (DL_FUNC) &_dbn_reshape_Z_to_cube_parallel, 4},
    {"_dbn_compute_M_static_blocked", (DL_FUNC) &_dbn_compute_M_static_blocked, 4},
    {"_dbn_compute_rss_static_parallel", (DL_FUNC) &_dbn_compute_rss_static_parallel, 5},
    {"_dbn_update_B_static_tiled", (DL_FUNC) &_dbn_update_B_static_tiled, 7},
    {"_dbn_update_A_batch", (DL_FUNC) &_dbn_update_A_batch, 11},
    {"_dbn_update_B_batch", (DL_FUNC) &_dbn_update_B_batch, 11},
    {"_dbn_update_AB_static_cpp", (DL_FUNC) &_dbn_update_AB_static_cpp, 6},
    {"_dbn_build_F_alpha_cpp", (DL_FUNC) &_dbn_build_F_alpha_cpp, 4},
    {"_dbn_compute_XB_tensor", (DL_FUNC) &_dbn_compute_XB_tensor, 5},
    {"_dbn_update_B_static", (DL_FUNC) &_dbn_update_B_static, 7},
    {"_dbn_broadcast_M_and_compute_EZ", (DL_FUNC) &_dbn_broadcast_M_and_compute_EZ, 5},
    {"_dbn_compute_s2_update", (DL_FUNC) &_dbn_compute_s2_update, 7},
    {"_dbn_update_variances_batch", (DL_FUNC) &_dbn_update_variances_batch, 4},
    {"_dbn_stabilize_matrix", (DL_FUNC) &_dbn_stabilize_matrix, 2},
    {"_dbn_update_Z_dynamic", (DL_FUNC) &_dbn_update_Z_dynamic, 8},
    {"_dbn_precompute_products", (DL_FUNC) &_dbn_precompute_products, 4},
    {"_dbn_compute_residual_sum_squares", (DL_FUNC) &_dbn_compute_residual_sum_squares, 3},
    {"_dbn_compute_innovation_variance", (DL_FUNC) &_dbn_compute_innovation_variance, 4},
    {"_dbn_compute_M_update", (DL_FUNC) &_dbn_compute_M_update, 4},
    {"_dbn_compute_AB_innovations", (DL_FUNC) &_dbn_compute_AB_innovations, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dbn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
